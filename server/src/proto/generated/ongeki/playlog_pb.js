// source: ongeki/playlog.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var ongeki_common_pb = require('../ongeki/common_pb.js');
goog.object.extend(proto, ongeki_common_pb);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogBoss', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogCard', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogEvent', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogInfo', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogJudge', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogJudgeRate', null, global);
goog.exportSymbol('proto.mythos.ongeki.v0.PlaylogMatchingUser', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogInfo.displayName = 'proto.mythos.ongeki.v0.PlaylogInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogJudge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogJudge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogJudge.displayName = 'proto.mythos.ongeki.v0.PlaylogJudge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogJudgeRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogJudgeRate.displayName = 'proto.mythos.ongeki.v0.PlaylogJudgeRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogMatchingUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogMatchingUser.displayName = 'proto.mythos.ongeki.v0.PlaylogMatchingUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogCard.displayName = 'proto.mythos.ongeki.v0.PlaylogCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogBoss = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogBoss, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogBoss.displayName = 'proto.mythos.ongeki.v0.PlaylogBoss';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mythos.ongeki.v0.PlaylogEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mythos.ongeki.v0.PlaylogEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mythos.ongeki.v0.PlaylogEvent.displayName = 'proto.mythos.ongeki.v0.PlaylogEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    musicId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    techScore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    battleScore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    overDamage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    platinumScore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    techScoreRank: jspb.Message.getFieldWithDefault(msg, 7, 0),
    battleScoreRank: jspb.Message.getFieldWithDefault(msg, 8, 0),
    comboStatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
    clearStatus: jspb.Message.getFieldWithDefault(msg, 10, 0),
    isFullBell: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    isTechNewRecord: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    isBattleNewRecord: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    isOverDamageNewRecord: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    userPlayDate: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo}
 */
proto.mythos.ongeki.v0.PlaylogInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogInfo;
  return proto.mythos.ongeki.v0.PlaylogInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo}
 */
proto.mythos.ongeki.v0.PlaylogInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMusicId(value);
      break;
    case 2:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTechScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBattleScore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOverDamage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatinumScore(value);
      break;
    case 7:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiTechScoreRank} */ (reader.readEnum());
      msg.setTechScoreRank(value);
      break;
    case 8:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiBattleScoreRank} */ (reader.readEnum());
      msg.setBattleScoreRank(value);
      break;
    case 9:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiComboStatus} */ (reader.readEnum());
      msg.setComboStatus(value);
      break;
    case 10:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiClearStatus} */ (reader.readEnum());
      msg.setClearStatus(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFullBell(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsTechNewRecord(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBattleNewRecord(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOverDamageNewRecord(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserPlayDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMusicId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTechScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBattleScore();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOverDamage();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPlatinumScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTechScoreRank();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getBattleScoreRank();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getComboStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getClearStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getIsFullBell();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIsTechNewRecord();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIsBattleNewRecord();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIsOverDamageNewRecord();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getUserPlayDate();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int32 music_id = 1;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getMusicId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setMusicId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional OngekiLevel level = 2;
 * @return {!proto.mythos.ongeki.v0.OngekiLevel}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getLevel = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiLevel} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 tech_score = 3;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getTechScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setTechScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 battle_score = 4;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getBattleScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setBattleScore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 over_damage = 5;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getOverDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setOverDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 platinum_score = 6;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getPlatinumScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setPlatinumScore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional OngekiTechScoreRank tech_score_rank = 7;
 * @return {!proto.mythos.ongeki.v0.OngekiTechScoreRank}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getTechScoreRank = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiTechScoreRank} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiTechScoreRank} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setTechScoreRank = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional OngekiBattleScoreRank battle_score_rank = 8;
 * @return {!proto.mythos.ongeki.v0.OngekiBattleScoreRank}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getBattleScoreRank = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiBattleScoreRank} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiBattleScoreRank} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setBattleScoreRank = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional OngekiComboStatus combo_status = 9;
 * @return {!proto.mythos.ongeki.v0.OngekiComboStatus}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getComboStatus = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiComboStatus} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiComboStatus} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setComboStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OngekiClearStatus clear_status = 10;
 * @return {!proto.mythos.ongeki.v0.OngekiClearStatus}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getClearStatus = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiClearStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiClearStatus} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setClearStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional bool is_full_bell = 11;
 * @return {boolean}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getIsFullBell = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setIsFullBell = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool is_tech_new_record = 12;
 * @return {boolean}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getIsTechNewRecord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setIsTechNewRecord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool is_battle_new_record = 13;
 * @return {boolean}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getIsBattleNewRecord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setIsBattleNewRecord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool is_over_damage_new_record = 14;
 * @return {boolean}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getIsOverDamageNewRecord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setIsOverDamageNewRecord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string user_play_date = 15;
 * @return {string}
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.getUserPlayDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.mythos.ongeki.v0.PlaylogInfo} returns this
 */
proto.mythos.ongeki.v0.PlaylogInfo.prototype.setUserPlayDate = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogJudge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogJudge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogJudge.toObject = function(includeInstance, msg) {
  var f, obj = {
    judgeCriticalBreak: jspb.Message.getFieldWithDefault(msg, 17, 0),
    judgeBreak: jspb.Message.getFieldWithDefault(msg, 18, 0),
    judgeHit: jspb.Message.getFieldWithDefault(msg, 19, 0),
    judgeMiss: jspb.Message.getFieldWithDefault(msg, 20, 0),
    maxCombo: jspb.Message.getFieldWithDefault(msg, 21, 0),
    bellCount: jspb.Message.getFieldWithDefault(msg, 22, 0),
    totalBellCount: jspb.Message.getFieldWithDefault(msg, 23, 0),
    damageCount: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge}
 */
proto.mythos.ongeki.v0.PlaylogJudge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogJudge;
  return proto.mythos.ongeki.v0.PlaylogJudge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogJudge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge}
 */
proto.mythos.ongeki.v0.PlaylogJudge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJudgeCriticalBreak(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJudgeBreak(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJudgeHit(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJudgeMiss(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxCombo(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBellCount(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalBellCount(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDamageCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogJudge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogJudge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogJudge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJudgeCriticalBreak();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getJudgeBreak();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getJudgeHit();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getJudgeMiss();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getMaxCombo();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getBellCount();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getTotalBellCount();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getDamageCount();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
};


/**
 * optional int32 judge_critical_break = 17;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getJudgeCriticalBreak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setJudgeCriticalBreak = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 judge_break = 18;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getJudgeBreak = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setJudgeBreak = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 judge_hit = 19;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getJudgeHit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setJudgeHit = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 judge_miss = 20;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getJudgeMiss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setJudgeMiss = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 max_combo = 21;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getMaxCombo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setMaxCombo = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 bell_count = 22;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getBellCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setBellCount = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 total_bell_count = 23;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getTotalBellCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setTotalBellCount = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 damage_count = 24;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.getDamageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudge} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudge.prototype.setDamageCount = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogJudgeRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogJudgeRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rateTap: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rateHold: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rateFlick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rateSideTap: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rateSideHold: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogJudgeRate;
  return proto.mythos.ongeki.v0.PlaylogJudgeRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogJudgeRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRateTap(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRateHold(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRateFlick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRateSideTap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRateSideHold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogJudgeRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogJudgeRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRateTap();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRateHold();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRateFlick();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRateSideTap();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRateSideHold();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 rate_tap = 1;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.getRateTap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.setRateTap = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 rate_hold = 2;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.getRateHold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.setRateHold = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 rate_flick = 3;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.getRateFlick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.setRateFlick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 rate_side_tap = 4;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.getRateSideTap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.setRateSideTap = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rate_side_hold = 5;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.getRateSideHold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogJudgeRate} returns this
 */
proto.mythos.ongeki.v0.PlaylogJudgeRate.prototype.setRateSideHold = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogMatchingUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogMatchingUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    musicLevel: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogMatchingUser}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogMatchingUser;
  return proto.mythos.ongeki.v0.PlaylogMatchingUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogMatchingUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogMatchingUser}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiLevel} */ (reader.readEnum());
      msg.setMusicLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogMatchingUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogMatchingUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMusicLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mythos.ongeki.v0.PlaylogMatchingUser} returns this
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OngekiLevel music_level = 2;
 * @return {!proto.mythos.ongeki.v0.OngekiLevel}
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.getMusicLevel = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiLevel} value
 * @return {!proto.mythos.ongeki.v0.PlaylogMatchingUser} returns this
 */
proto.mythos.ongeki.v0.PlaylogMatchingUser.prototype.setMusicLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cardLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cardAttack: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogCard}
 */
proto.mythos.ongeki.v0.PlaylogCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogCard;
  return proto.mythos.ongeki.v0.PlaylogCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogCard}
 */
proto.mythos.ongeki.v0.PlaylogCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardAttack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCardLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCardAttack();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 card_id = 1;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.getCardId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogCard} returns this
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.setCardId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 card_level = 2;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.getCardLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogCard} returns this
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.setCardLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 card_attack = 3;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.getCardAttack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogCard} returns this
 */
proto.mythos.ongeki.v0.PlaylogCard.prototype.setCardAttack = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogBoss.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogBoss} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogBoss.toObject = function(includeInstance, msg) {
  var f, obj = {
    bossId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bossLevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bossAttribute: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogBoss}
 */
proto.mythos.ongeki.v0.PlaylogBoss.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogBoss;
  return proto.mythos.ongeki.v0.PlaylogBoss.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogBoss} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogBoss}
 */
proto.mythos.ongeki.v0.PlaylogBoss.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBossId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBossLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.mythos.ongeki.v0.OngekiBossAttribute} */ (reader.readEnum());
      msg.setBossAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogBoss.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogBoss} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogBoss.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBossId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBossLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBossAttribute();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 boss_id = 1;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.getBossId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogBoss} returns this
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.setBossId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 boss_level = 2;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.getBossLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogBoss} returns this
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.setBossLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional OngekiBossAttribute boss_attribute = 3;
 * @return {!proto.mythos.ongeki.v0.OngekiBossAttribute}
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.getBossAttribute = function() {
  return /** @type {!proto.mythos.ongeki.v0.OngekiBossAttribute} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.mythos.ongeki.v0.OngekiBossAttribute} value
 * @return {!proto.mythos.ongeki.v0.PlaylogBoss} returns this
 */
proto.mythos.ongeki.v0.PlaylogBoss.prototype.setBossAttribute = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.mythos.ongeki.v0.PlaylogEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mythos.ongeki.v0.PlaylogEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventPoint: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mythos.ongeki.v0.PlaylogEvent}
 */
proto.mythos.ongeki.v0.PlaylogEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mythos.ongeki.v0.PlaylogEvent;
  return proto.mythos.ongeki.v0.PlaylogEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mythos.ongeki.v0.PlaylogEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mythos.ongeki.v0.PlaylogEvent}
 */
proto.mythos.ongeki.v0.PlaylogEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mythos.ongeki.v0.PlaylogEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mythos.ongeki.v0.PlaylogEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mythos.ongeki.v0.PlaylogEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEventName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventPoint();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 event_id = 1;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.getEventId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogEvent} returns this
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.setEventId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string event_name = 2;
 * @return {string}
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mythos.ongeki.v0.PlaylogEvent} returns this
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.setEventName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 event_point = 3;
 * @return {number}
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.getEventPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mythos.ongeki.v0.PlaylogEvent} returns this
 */
proto.mythos.ongeki.v0.PlaylogEvent.prototype.setEventPoint = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.mythos.ongeki.v0);
